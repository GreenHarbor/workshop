stages:
  - Static Analysis
  - Test
  - Release
  - Deploy

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: Static Analysis
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - go mod tidy && go mod vendor
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - "[ -e .golangci.yml ] || cp /golangci/.golangci.yml ."
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --issues-exit-code 0 --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

tests:
  stage: Test
  image: golang:1.21
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - make test

release-tag:
  stage: Release
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  rules:
    - if: "$CI_COMMIT_TAG != null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - NEW_TAG=$CI_COMMIT_TAG
    - echo $NEW_TAG
    # BUILD IMAGE WITH COMMIT SHA
    - docker build --platform linux/arm64 . -t "$CI_REGISTRY_IMAGE:$NEW_TAG"
    # RETAG IMAGE LATEST WITH DIGEST FROM PREVIOUS IMAGE
    - IMAGE_ID=$(docker images | grep $CI_REGISTRY_IMAGE | awk '{print $3}')
    - docker tag $IMAGE_ID "$CI_REGISTRY_IMAGE:latest"
    # PUSH IMAGE COMMIT SHA and LATEST
    - docker push "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"

release-image:
  stage: Release
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # RETRIEVE ALL IMAGES
    - docker pull $CI_REGISTRY_IMAGE -a
    # FIND LATEST TAG
    - TAG=$(docker images --format "{{.Tag}}" | sort -r | head -1)
    - last_element=$(echo "$TAG" | cut -d'.' -f3)
    - previous_elements=$(echo "$TAG" | cut -d'.' -f1-2)
    - incremented_last_element=$((last_element + 1))
    - NEW_TAG="$previous_elements.$incremented_last_element"
    - echo $NEW_TAG
    # BUILD IMAGE WITH COMMIT SHA
    - docker build --platform linux/arm64 . -t "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker push "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker build --platform linux/arm64 . -t "$CI_REGISTRY_IMAGE:latest"
    # PUSH IMAGE COMMIT SHA and LATEST
    - docker push "$CI_REGISTRY_IMAGE:latest"

publish:
  stage: Deploy
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  variables:
    APP_NAME: workshop
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE
    - docker tag "$CI_REGISTRY_IMAGE:latest" "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - echo $CI_AWS_ECR_URI
    - echo "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $CI_AWS_ECR_URI
    - docker push "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - export AWS_PAGER=
    - aws ecs update-service --cluster greenharbor --service workshop --force-new-deployment
